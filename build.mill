package build

import mill._
import mill.scalalib._
import mill.scalalib.api.JvmWorkerUtil.scalaNativeBinaryVersion
import mill.scalalib.publish._
import $ivy.`com.lihaoyi::mill-contrib-buildinfo:`
import mill.contrib.buildinfo.BuildInfo
import $ivy.`com.goyeau::mill-scalafix::0.5.0`
import com.goyeau.mill.scalafix.ScalafixModule
import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1`
import de.tobiasroeser.mill.vcs.version.VcsVersion
import $ivy.`com.github.lolgab::mill-mima::0.1.1`
import com.github.lolgab.mill.mima._

import scala.concurrent.duration._

val latestMillDevVersion: Option[String] = {
  sys.env
    .get("GITHUB_EVENT_NAME")
    .filter(_ == "workflow_dispatch")
    .map { _ =>
      import coursier._
      val versions =
        Versions(cache.FileCache().withTtl(1.minute))
          .withModule(mod"com.lihaoyi:mill-main_2.13")
          .run()
      versions.latest0.repr
    }
}

val scala3 = "3.7.0"

val mimaDefaultVersion = "1.1.4"
val millVersions = latestMillDevVersion match {
  case None          => Seq("1.0.0-RC1")
  case Some(version) => Seq(version)
}
val itestMillVersions = latestMillDevVersion match {
  case None          => Seq("1.0.0-RC1")
  case Some(version) => Seq(version)
}
val millBinaryVersions = millVersions.map(millBinaryVersion)

def millBinaryVersion(millVersion: String) = {
  if (latestMillDevVersion.contains(millVersion)) millVersion
  else scalaNativeBinaryVersion(millVersion)
}
def millVersion(binaryVersion: String) =
  millVersions.find(v => millBinaryVersion(v) == binaryVersion).get

trait Common extends ScalaModule with PublishModule with ScalafixModule {
  def scalaVersion = scala3
  def pomSettings = PomSettings(
    description = "MiMa Mill Plugin",
    organization = "com.github.lolgab",
    url = "https://github.com/lolgab/mill-mima",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github("lolgab", "mill-mima"),
    developers = Seq(
      Developer("lolgab", "Lorenzo Gabriele", "https://github.com/lolgab")
    )
  )
  def forcedMimaVersion = Task.Input {
    Task.env.get("MILL_MIMA_FORCED_VERSION")
  }
  def publishVersion = Task {
    forcedMimaVersion().getOrElse(VcsVersion.vcsState().format())
  }

  def scalacOptions =
    super.scalacOptions() ++ Seq("-Wunused:all", "-deprecation")
}

object `mill-mima` extends Cross[MillMimaCross](millBinaryVersions)
trait MillMimaCross
    extends Common
    with Mima
    with BuildInfo
    with Cross.Module[String] { millMima =>
  def isMill1 = millBinaryVersion.startsWith("1")
  val millBinaryVersion = crossValue
  override def moduleDeps =
    super.moduleDeps ++ Seq(`mill-mima-worker-api`)
  override def artifactName = s"mill-mima_mill$millBinaryVersion"
  def mimaPreviousVersions = Seq.empty[String]
  override def sources = T.sources(
    super.sources() ++ Seq(
      moduleDir / s"src-mill${millBinaryVersion.split('.').head}"
    ).map(PathRef(_))
  )
  override def compileIvyDeps = super.compileIvyDeps() ++ Seq(
    ivy"com.lihaoyi::mill-libs:${millVersion(millBinaryVersion)}"
  )
  override def buildInfoMembers = Task {
    Seq(
      BuildInfo.Value("publishVersion", publishVersion()),
      BuildInfo.Value("mimaDefaultVersion", mimaDefaultVersion)
    )
  }
  override def buildInfoObjectName = "MimaBuildInfo"
  override def buildInfoPackageName = "com.github.lolgab.mill.mima.worker"

  object itest extends ScalaTests with TestModule.Utest {
    def ivyDeps = Agg(
      ivy"com.lihaoyi::mill-testkit:${millVersion(millBinaryVersion)}"
    )
    def forkEnv = Task {
      val artifact =
        s"${millMima.pomSettings().organization}-${millMima.artifactId()}"
          .replaceAll("[.-]", "_")
      val localClasspathString =
        millMima.localClasspath().map(_.path).mkString("\n")
      Map(
        "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString,
        "MILL_LOCAL_TEST_OVERRIDE_com_github_lolgab_mill_mima_mill1_3" -> localClasspathString
      )
    }

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule {
      def ivyDeps = Agg(
        ivy"com.lihaoyi:mill-runner-launcher_3:${millVersion(millBinaryVersion)}"
      )
      def mainClass = Some("mill.launcher.MillLauncherMain")
    }
  }
}

object `mill-mima-worker-api` extends Common
object `mill-mima-worker-impl` extends Common {
  override def moduleDeps = super.moduleDeps ++ Seq(`mill-mima-worker-api`)
  override def compileIvyDeps = super.compileIvyDeps() ++ Agg(
    ivy"com.typesafe:mima-core_2.13:$mimaDefaultVersion"
  )
}
